//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `ic_checkbox_checked`.
    static let ic_checkbox_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox_checked")
    /// Image `ic_checkbox`.
    static let ic_checkbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checkbox")
    /// Image `ic_eye_off`.
    static let ic_eye_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eye_off")
    /// Image `ic_eye_on`.
    static let ic_eye_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eye_on")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_status_bad`.
    static let ic_status_bad = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_status_bad")
    /// Image `ic_status_good`.
    static let ic_status_good = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_status_good")
    /// Image `ic_status_processing`.
    static let ic_status_processing = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_status_processing")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkbox", bundle: ..., traitCollection: ...)`
    static func ic_checkbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkbox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checkbox_checked", bundle: ..., traitCollection: ...)`
    static func ic_checkbox_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checkbox_checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_eye_off", bundle: ..., traitCollection: ...)`
    static func ic_eye_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_eye_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_eye_on", bundle: ..., traitCollection: ...)`
    static func ic_eye_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_eye_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_status_bad", bundle: ..., traitCollection: ...)`
    static func ic_status_bad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_status_bad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_status_good", bundle: ..., traitCollection: ...)`
    static func ic_status_good(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_status_good, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_status_processing", bundle: ..., traitCollection: ...)`
    static func ic_status_processing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_status_processing, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 47 localization keys.
    struct localizable {
      /// en translation: Add Student
      ///
      /// Locales: en
      static let title_add_student = Rswift.StringResource(key: "title_add_student", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Address:
      ///
      /// Locales: en
      static let label_address = Rswift.StringResource(key: "label_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: en
      static let logout_alert_message = Rswift.StringResource(key: "logout_alert_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bus inspection
      ///
      /// Locales: en
      static let title_bus_inspection = Rswift.StringResource(key: "title_bus_inspection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Campus:
      ///
      /// Locales: en
      static let label_campus = Rswift.StringResource(key: "label_campus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let button_cancel = Rswift.StringResource(key: "button_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Change bus
      ///
      /// Locales: en
      static let title_change_bus = Rswift.StringResource(key: "title_change_bus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Comments...
      ///
      /// Locales: en
      static let placeholder_comments = Rswift.StringResource(key: "placeholder_comments", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dashboard
      ///
      /// Locales: en
      static let title_dashboard = Rswift.StringResource(key: "title_dashboard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Double-check your email
      ///
      /// Locales: en
      static let error_email = Rswift.StringResource(key: "error_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Driver Id
      ///
      /// Locales: en
      static let placeholder_driver_id = Rswift.StringResource(key: "placeholder_driver_id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Finalize bus inspection
      ///
      /// Locales: en
      static let title_finalize_bus_inspection = Rswift.StringResource(key: "title_finalize_bus_inspection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Have all seats been checked?
      ///
      /// Locales: en
      static let label_have_all_seats_been_checked = Rswift.StringResource(key: "label_have_all_seats_been_checked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Inspection type
      ///
      /// Locales: en
      static let label_inspection_type = Rswift.StringResource(key: "label_inspection_type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Is vehicle safe to operate?
      ///
      /// Locales: en
      static let labe_is_vechile_safe = Rswift.StringResource(key: "labe_is_vechile_safe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Location is not shared
      ///
      /// Locales: en
      static let title_location_permission_is_mandatory = Rswift.StringResource(key: "title_location_permission_is_mandatory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Location permission is mandatory to complete your action. Seems you were denied access to it. You can enable it in settings.
      ///
      /// Locales: en
      static let subtitle_location_permission_is_mandatory = Rswift.StringResource(key: "subtitle_location_permission_is_mandatory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en
      static let title_logout = Rswift.StringResource(key: "title_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Monitor boarding
      ///
      /// Locales: en
      static let title_monitor_boarding = Rswift.StringResource(key: "title_monitor_boarding", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en
      static let button_next = Rswift.StringResource(key: "button_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en
      static let label_no = Rswift.StringResource(key: "label_no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en
      static let logout_alert_button_no = Rswift.StringResource(key: "logout_alert_button_no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No items were found for this query
      ///
      /// Locales: en
      static let error_empty_search = Rswift.StringResource(key: "error_empty_search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en
      static let sign_up_alert_button = Rswift.StringResource(key: "sign_up_alert_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en
      static let placeholder_password = Rswift.StringResource(key: "placeholder_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please fill in all fields
      ///
      /// Locales: en
      static let sign_up_alert_error_message = Rswift.StringResource(key: "sign_up_alert_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Post
      ///
      /// Locales: en
      static let enum_inspection_type_post = Rswift.StringResource(key: "enum_inspection_type_post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pre
      ///
      /// Locales: en
      static let enum_inspection_type_pre = Rswift.StringResource(key: "enum_inspection_type_pre", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ridership changes
      ///
      /// Locales: en
      static let title_ridersheep_changes = Rswift.StringResource(key: "title_ridersheep_changes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: School Id
      ///
      /// Locales: en
      static let placeholder_school_id = Rswift.StringResource(key: "placeholder_school_id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search bus
      ///
      /// Locales: en
      static let placeholder_search_bus = Rswift.StringResource(key: "placeholder_search_bus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search student
      ///
      /// Locales: en
      static let placeholder_search_student = Rswift.StringResource(key: "placeholder_search_student", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select bus
      ///
      /// Locales: en
      static let title_select_bus = Rswift.StringResource(key: "title_select_bus", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en
      static let button_settings = Rswift.StringResource(key: "button_settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign In
      ///
      /// Locales: en
      static let button_sign_in = Rswift.StringResource(key: "button_sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign in
      ///
      /// Locales: en
      static let title_sign_in = Rswift.StringResource(key: "title_sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign up
      ///
      /// Locales: en
      static let button_sign_up = Rswift.StringResource(key: "button_sign_up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign up
      ///
      /// Locales: en
      static let title_sign_up = Rswift.StringResource(key: "title_sign_up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Something went wrong. Please, try again.
      ///
      /// Locales: en
      static let error_general = Rswift.StringResource(key: "error_general", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Status:
      ///
      /// Locales: en
      static let label_status = Rswift.StringResource(key: "label_status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Student:
      ///
      /// Locales: en
      static let label_student = Rswift.StringResource(key: "label_student", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en
      static let button_submit = Rswift.StringResource(key: "button_submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: This field can't be empty
      ///
      /// Locales: en
      static let error_empty_field = Rswift.StringResource(key: "error_empty_field", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Time:
      ///
      /// Locales: en
      static let label_time = Rswift.StringResource(key: "label_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en
      static let label_yes = Rswift.StringResource(key: "label_yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en
      static let logout_alert_button_yes = Rswift.StringResource(key: "logout_alert_button_yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You account will be verified within 72 hours
      ///
      /// Locales: en
      static let sign_up_alert_message = Rswift.StringResource(key: "sign_up_alert_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: Add Student
      ///
      /// Locales: en
      static func title_add_student(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_add_student", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_add_student"
        }

        return NSLocalizedString("title_add_student", bundle: bundle, comment: "")
      }

      /// en translation: Address:
      ///
      /// Locales: en
      static func label_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("label_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "label_address"
        }

        return NSLocalizedString("label_address", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: en
      static func logout_alert_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout_alert_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout_alert_message"
        }

        return NSLocalizedString("logout_alert_message", bundle: bundle, comment: "")
      }

      /// en translation: Bus inspection
      ///
      /// Locales: en
      static func title_bus_inspection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_bus_inspection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_bus_inspection"
        }

        return NSLocalizedString("title_bus_inspection", bundle: bundle, comment: "")
      }

      /// en translation: Campus:
      ///
      /// Locales: en
      static func label_campus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("label_campus", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "label_campus"
        }

        return NSLocalizedString("label_campus", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func button_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button_cancel"
        }

        return NSLocalizedString("button_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Change bus
      ///
      /// Locales: en
      static func title_change_bus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_change_bus", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_change_bus"
        }

        return NSLocalizedString("title_change_bus", bundle: bundle, comment: "")
      }

      /// en translation: Comments...
      ///
      /// Locales: en
      static func placeholder_comments(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholder_comments", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "placeholder_comments"
        }

        return NSLocalizedString("placeholder_comments", bundle: bundle, comment: "")
      }

      /// en translation: Dashboard
      ///
      /// Locales: en
      static func title_dashboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_dashboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_dashboard"
        }

        return NSLocalizedString("title_dashboard", bundle: bundle, comment: "")
      }

      /// en translation: Double-check your email
      ///
      /// Locales: en
      static func error_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_email"
        }

        return NSLocalizedString("error_email", bundle: bundle, comment: "")
      }

      /// en translation: Driver Id
      ///
      /// Locales: en
      static func placeholder_driver_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholder_driver_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "placeholder_driver_id"
        }

        return NSLocalizedString("placeholder_driver_id", bundle: bundle, comment: "")
      }

      /// en translation: Finalize bus inspection
      ///
      /// Locales: en
      static func title_finalize_bus_inspection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_finalize_bus_inspection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_finalize_bus_inspection"
        }

        return NSLocalizedString("title_finalize_bus_inspection", bundle: bundle, comment: "")
      }

      /// en translation: Have all seats been checked?
      ///
      /// Locales: en
      static func label_have_all_seats_been_checked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("label_have_all_seats_been_checked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "label_have_all_seats_been_checked"
        }

        return NSLocalizedString("label_have_all_seats_been_checked", bundle: bundle, comment: "")
      }

      /// en translation: Inspection type
      ///
      /// Locales: en
      static func label_inspection_type(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("label_inspection_type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "label_inspection_type"
        }

        return NSLocalizedString("label_inspection_type", bundle: bundle, comment: "")
      }

      /// en translation: Is vehicle safe to operate?
      ///
      /// Locales: en
      static func labe_is_vechile_safe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("labe_is_vechile_safe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "labe_is_vechile_safe"
        }

        return NSLocalizedString("labe_is_vechile_safe", bundle: bundle, comment: "")
      }

      /// en translation: Location is not shared
      ///
      /// Locales: en
      static func title_location_permission_is_mandatory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_location_permission_is_mandatory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_location_permission_is_mandatory"
        }

        return NSLocalizedString("title_location_permission_is_mandatory", bundle: bundle, comment: "")
      }

      /// en translation: Location permission is mandatory to complete your action. Seems you were denied access to it. You can enable it in settings.
      ///
      /// Locales: en
      static func subtitle_location_permission_is_mandatory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subtitle_location_permission_is_mandatory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subtitle_location_permission_is_mandatory"
        }

        return NSLocalizedString("subtitle_location_permission_is_mandatory", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en
      static func title_logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_logout"
        }

        return NSLocalizedString("title_logout", bundle: bundle, comment: "")
      }

      /// en translation: Monitor boarding
      ///
      /// Locales: en
      static func title_monitor_boarding(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_monitor_boarding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_monitor_boarding"
        }

        return NSLocalizedString("title_monitor_boarding", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en
      static func button_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button_next"
        }

        return NSLocalizedString("button_next", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en
      static func label_no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("label_no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "label_no"
        }

        return NSLocalizedString("label_no", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en
      static func logout_alert_button_no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout_alert_button_no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout_alert_button_no"
        }

        return NSLocalizedString("logout_alert_button_no", bundle: bundle, comment: "")
      }

      /// en translation: No items were found for this query
      ///
      /// Locales: en
      static func error_empty_search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_empty_search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_empty_search"
        }

        return NSLocalizedString("error_empty_search", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en
      static func sign_up_alert_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_alert_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_alert_button"
        }

        return NSLocalizedString("sign_up_alert_button", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en
      static func placeholder_password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholder_password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "placeholder_password"
        }

        return NSLocalizedString("placeholder_password", bundle: bundle, comment: "")
      }

      /// en translation: Please fill in all fields
      ///
      /// Locales: en
      static func sign_up_alert_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_alert_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_alert_error_message"
        }

        return NSLocalizedString("sign_up_alert_error_message", bundle: bundle, comment: "")
      }

      /// en translation: Post
      ///
      /// Locales: en
      static func enum_inspection_type_post(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enum_inspection_type_post", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enum_inspection_type_post"
        }

        return NSLocalizedString("enum_inspection_type_post", bundle: bundle, comment: "")
      }

      /// en translation: Pre
      ///
      /// Locales: en
      static func enum_inspection_type_pre(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enum_inspection_type_pre", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enum_inspection_type_pre"
        }

        return NSLocalizedString("enum_inspection_type_pre", bundle: bundle, comment: "")
      }

      /// en translation: Ridership changes
      ///
      /// Locales: en
      static func title_ridersheep_changes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_ridersheep_changes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_ridersheep_changes"
        }

        return NSLocalizedString("title_ridersheep_changes", bundle: bundle, comment: "")
      }

      /// en translation: School Id
      ///
      /// Locales: en
      static func placeholder_school_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholder_school_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "placeholder_school_id"
        }

        return NSLocalizedString("placeholder_school_id", bundle: bundle, comment: "")
      }

      /// en translation: Search bus
      ///
      /// Locales: en
      static func placeholder_search_bus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholder_search_bus", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "placeholder_search_bus"
        }

        return NSLocalizedString("placeholder_search_bus", bundle: bundle, comment: "")
      }

      /// en translation: Search student
      ///
      /// Locales: en
      static func placeholder_search_student(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholder_search_student", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "placeholder_search_student"
        }

        return NSLocalizedString("placeholder_search_student", bundle: bundle, comment: "")
      }

      /// en translation: Select bus
      ///
      /// Locales: en
      static func title_select_bus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_select_bus", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_select_bus"
        }

        return NSLocalizedString("title_select_bus", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en
      static func button_settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button_settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button_settings"
        }

        return NSLocalizedString("button_settings", bundle: bundle, comment: "")
      }

      /// en translation: Sign In
      ///
      /// Locales: en
      static func button_sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button_sign_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button_sign_in"
        }

        return NSLocalizedString("button_sign_in", bundle: bundle, comment: "")
      }

      /// en translation: Sign in
      ///
      /// Locales: en
      static func title_sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_sign_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_sign_in"
        }

        return NSLocalizedString("title_sign_in", bundle: bundle, comment: "")
      }

      /// en translation: Sign up
      ///
      /// Locales: en
      static func button_sign_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button_sign_up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button_sign_up"
        }

        return NSLocalizedString("button_sign_up", bundle: bundle, comment: "")
      }

      /// en translation: Sign up
      ///
      /// Locales: en
      static func title_sign_up(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_sign_up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_sign_up"
        }

        return NSLocalizedString("title_sign_up", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong. Please, try again.
      ///
      /// Locales: en
      static func error_general(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_general", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_general"
        }

        return NSLocalizedString("error_general", bundle: bundle, comment: "")
      }

      /// en translation: Status:
      ///
      /// Locales: en
      static func label_status(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("label_status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "label_status"
        }

        return NSLocalizedString("label_status", bundle: bundle, comment: "")
      }

      /// en translation: Student:
      ///
      /// Locales: en
      static func label_student(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("label_student", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "label_student"
        }

        return NSLocalizedString("label_student", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en
      static func button_submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button_submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button_submit"
        }

        return NSLocalizedString("button_submit", bundle: bundle, comment: "")
      }

      /// en translation: This field can't be empty
      ///
      /// Locales: en
      static func error_empty_field(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_empty_field", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_empty_field"
        }

        return NSLocalizedString("error_empty_field", bundle: bundle, comment: "")
      }

      /// en translation: Time:
      ///
      /// Locales: en
      static func label_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("label_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "label_time"
        }

        return NSLocalizedString("label_time", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en
      static func label_yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("label_yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "label_yes"
        }

        return NSLocalizedString("label_yes", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en
      static func logout_alert_button_yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout_alert_button_yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout_alert_button_yes"
        }

        return NSLocalizedString("logout_alert_button_yes", bundle: bundle, comment: "")
      }

      /// en translation: You account will be verified within 72 hours
      ///
      /// Locales: en
      static func sign_up_alert_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_alert_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_alert_message"
        }

        return NSLocalizedString("sign_up_alert_message", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
